apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'de.mobilej.unmock'

def versionMajor = 0
def versionMinor = 9
def versionPatch = 0
def versionBuild = 0

def buildTime = new Date().format("dd-MM-yyyy'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion versions.compile_sdk
    buildToolsVersion versions.build_tools

    defaultConfig {
        applicationId "com.example.plainoldandroidmaster_detail"
        minSdkVersion versions.min_sdk
        targetSdkVersion versions.target_sdk
        versionCode buildVersionCode(versionMajor, versionMinor, versionPatch, versionBuild)
        versionName buildVersionName(versionMajor, versionMinor, versionPatch)

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError true
    }
}

unMock {

}

dependencies {
    debugCompile(libraries.leak_canary)
    releaseCompile(libraries.leak_canary_release)

    compile project(":common")

    testCompile(libraries.junit,
            libraries.leak_canary_release,
            libraries.powermock_api,
            libraries.powermock_agent,
            libraries.powermock_rule,
            libraries.powermock_junit,
            libraries.junit_platform,
            libraries.hamcrest)

    androidTestCompile(libraries.espresso,
            libraries.espresso_runner,
            libraries.espresso_intents,
            libraries.ui_automator,
            libraries.support_annotations,
            libraries.mockito,
            libraries.leak_canary_release)

    compile(libraries.android_appcompat,
            libraries.design_support,
            libraries.dagger,
            libraries.rxjava,
            libraries.rxandroid,
            libraries.timber,
            libraries.icepick)

    provided(libraries.icepick_processor)

    apt(libraries.dagger_compiler)
}

def buildVersionName(versionMajor, versionMinor, versionPatch) {
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}

def buildVersionCode(versionMajor, versionMinor, versionPatch, versionBuild) {
    return versionMajor * 1000 + versionMinor * 100 + versionPatch * 10 + versionBuild
}